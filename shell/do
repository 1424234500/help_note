#!/bin/bash  
###########################################
#do
#一些常用简单功能脚本
#./do commit <help>
###########################################
source constant.sh
source tools.sh
source do_git.sh
source do_renames.sh
source do_dirfile.sh
source do_clean.sh

source do_start_software.sh

##-----------------------------------------

#打包 walker-socket项目并 部署上传

function deploy(){
    cd ~/work/walker
    mvn clean install -Dmaven.test.skip=true
    service $@
    web $@
    socket $@

}

function socket(){
    now=`pwd -LP`
    cd ~/work/walker/walker-socket
    rm release -r
    mvn clean package -Dmaven.test.skip=true
    res=$?
    if (( ${res} != 0 )); then
        echo "mvn package error ${res}"
        exit ${res}
    fi
    cd release
    ./deploy.sh $@
    cp /home/walker/e/workspace/walker/walker-socket/release/walker-socket-0.0.1.jar /home/walker/e/workspace/dd/app/libs/
}
function core(){
    now=`pwd -LP`
    cd ~/work/walker/walker-core
    rm release -r
    mvn clean package -Dmaven.test.skip=true
    res=$?
    if (( ${res} != 0 )); then
        echo "mvn package error ${res}"
        exit ${res}
    fi
    cp /home/walker/e/workspace/walker/walker-core/release/walker-core-0.0.1.jar /home/walker/e/workspace/dd/app/libs/
    
    cd release
    ./deploy.sh $@

    
    
    
    now=`pwd -LP`
    cd ~/work/walker/walker-service
    rm release -r
    mvn clean package -Dmaven.test.skip=true
    res=$?
    if (( ${res} != 0 )); then
        echo "mvn package error ${res}"
        exit ${res}
    fi
    cp ~/work/walker/walker-service/target/walker-service-0.0.1.jar /home/walker/e/workspace/dd/app/libs/
    #./deploy.sh $@

    
}

function service(){
    now=`pwd -LP`
    cd ~/work/walker/walker-service-provider
    rm release -r
    mvn clean package -Dmaven.test.skip=true
    res=$?
    if (( ${res} != 0 )); then
        echo "mvn package error ${res}"
        exit ${res}
    fi
    cd release
    ./deploy.sh $@
}
function web(){
    now=`pwd -LP`
    cd ~/work/walker/walker-web
    rm release -r
    cd vue
    # 构建测试环境
    #npm run build:stage
    # 构建生产环境
    npm run build:prod 
    res=$?
    if (( ${res} != 0 )); then
        echo "npm run build error ${res}"
        exit ${res}
    fi
    cd ..
    mvn clean package -Dmaven.test.skip=true
    res=$?
    if (( ${res} != 0 )); then
        echo "mvn package error ${res}"
        exit ${res}
    fi
    cd release
    ./deploy.sh $@
}
function monitor(){

	scp -p /home/walker/e/workspace/dubbo-monitor/target/dubbo-monitor.war  walker@39.106.111.11:/home/walker/apache-tomcat-8.5.42/webapps/

}


function redisali(){
    /home/walker/software/redis-5.0.3/src/redis-cli -h 39.106.111.11 -p 6379
}
function mysqlali(){
    ~/software/mysql-8.0.16-linux-x86_64-minimal/bin/mysql -h 39.106.111.11 -u walker -pqwer
}
function ali(){
    ~/help/ssh/ali39
}
function android(){
    nohup /home/walker/software/android-studio/bin/studio.sh >/dev/null &
}

function smart(){
    cd /home/walker/software/smartgit/bin
    nohup ./smartgit.sh >/dev/null &
}




function redis(){
    cd /home/walker/software/redis-5.0.3/
#关闭
    ps -elf | grep redis | grep 700 | awk '{print $4}' | xargs kill -9
#1.启动 至少六个节点
    ./src/redis-server redis_cluster_7000.conf 
    ./src/redis-server redis_cluster_7001.conf 
    ./src/redis-server redis_cluster_7002.conf 
    ./src/redis-server redis_cluster_7003.conf 
    ./src/redis-server redis_cluster_7004.conf 
    ./src/redis-server redis_cluster_7005.conf 
#2.工具启动
#vim utils/create-cluster/create-cluster #设置端口起点为6999 数量
#cd utils/create-cluster/
#./create-cluster stop/start
#确认启动
    ps -elf | grep redis | grep 700
#新版redis不用 redis-trib.rb   自动设置前三为主master 后三为从slave
    ./src/redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1
#测试

}

function eclipse(){
    nohup /home/walker/software/eclipse/eclipse >/dev/null &
}



function stop(){
    echo 'stop'
}
function start(){
    do_start_sftware_start $@
}
function rename(){
    renames_rename $@
}
function showdir(){
    dirfile_init $@
}
# 转变c sh文件为unix模式crlf -> lf
function turn(){
    find $_help -type f | grep -v .git | grep '^.*\(\(\.c\)\|\(\.sh\)\)$' | xargs dos2unix
}
function clean(){
    cleanjava $@
    cleanpython $@
}
function cleanjava(){
    clean_cleanJava $@
}
function cleanpython(){
    clean_clean $@
}

function do_main(){ 
    echo
    toolsShow $@
    ##########################do something yourself
    do_init $@
    ##########################
    toolsLineLong 
    echo
}

function do_init(){  
    method=$1
    if [[ "$method" != "" ]]
    then 
        rootParams=($@)   
        params=(${rootParams[@]:1}) 
        toolsShowMethod $method "${params[*]}"
        #echo ${params[@]}
        $method ${params[@]}
    else
        echo 'eg:'
        echo './do test "params of test"'
    fi
}


function show(){  
    echo '$0'">>"$0
    echo '$*'">>"$*
    echo '$@'">>"$@    
    echo '$#'">>"$# 
    echo '$$'">>"$$ 
}


 
#start
do_main $@

